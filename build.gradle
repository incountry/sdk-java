import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:5.2.1'
    }
}

plugins {
    id 'io.codearte.nexus-staging' version '0.11.0'
    id "org.sonarqube" version "2.7.1"
    id 'jacoco'
}

apply plugin: 'maven'
apply plugin: 'java'
//apply plugin: 'groovy'
apply plugin: 'signing'

group group
version version

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = rootProject.name

sourceSets {
    integration {
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

sonarqube {
    properties {
        property "sonar.projectKey", "incountry_sdk-java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "incountry"
    }
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    integrationRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.6.0'
    testCompile "org.slf4j:slf4j-simple:${slf4jVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.google.http-client:google-http-client:${httpClientVersion}"
    compile "com.google.http-client:google-http-client-jackson2:${httpClientVersion}"
    compile "com.google.http-client:google-http-client-apache-v2:${httpClientVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile group: 'org.json', name: 'json', version: "${jsonVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    compile group: 'org.javatuples', name: 'javatuples', version: "${javatuples}"
}

jar {
    manifest {
        attributes("Implementation-Title": "${rootProject.group}:${rootProject.name}",
                "Implementation-Version": version,
                "Implementation-Vendor": "InCounty INC")
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

integrationTest {
    useJUnitPlatform()
}

artifacts {
    archives javadocJar, sourcesJar
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

nexusStaging {
    packageGroup = project.getGroup()
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

