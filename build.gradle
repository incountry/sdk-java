import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:5.2.1'
    }
}

plugins {
    id 'io.codearte.nexus-staging' version '0.11.0'
    id "org.sonarqube" version "2.6"
    id 'jacoco'
    id 'com.adarshr.test-logger' version '2.0.0'
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'signing'

group group
version version

if (hasProperty('targetJavaVersion')) {

    java {
        sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
    }

    def javaExecutablesPath = new File(javaHome, 'bin')
    def javaExecutables = [:].withDefault { execName ->
        def executable = new File(javaExecutablesPath, execName)
        assert executable.exists(): "There is no ${execName} executable in ${javaExecutablesPath}"
        executable
    }
    tasks.withType(AbstractCompile) {
        options.with {
            fork = true
            forkOptions.javaHome = file(javaHome)
        }
    }
    tasks.withType(Javadoc) {
        executable = javaExecutables.javadoc
    }
    tasks.withType(Test) {
        executable = javaExecutables.java
    }
    tasks.withType(JavaExec) {
        executable = javaExecutables.java
    }
}

archivesBaseName = rootProject.name

sourceSets {
    integration {
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
    provided
    compile.extendsFrom provided
}

sonarqube {
    properties {
        property "sonar.projectKey", "incountry_sdk-java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "incountry"
    }
}

repositories {
    mavenCentral()
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: nexusUsername, password: nexusPassword )
            }

            pom.project {
                packaging 'jar'
                name rootProject.name
                description 'InCountry Java SDK'
                url 'https://github.com/incountry/sdk-java'

                scm {
                    url 'https://github.com/incountry/sdk-java'
                    connection 'scm:https://github.com/incountry/sdk-java.git'
                    developerConnection 'scm:https://github.com/incountry/sdk-java.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/incountry/sdk-java/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'RommeroInCountry'
                        name 'Roman Semin'
                        email 'roman.semin@incountry.com'
                    }
                }
            }
        }
    }
}

dependencies {
    testCompile "junit:junit:${junitVersion}"

    testCompile "org.slf4j:slf4j-simple:${slf4jVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.google.http-client:google-http-client:${httpClientVersion}"
    compile "com.google.http-client:google-http-client-jackson2:${httpClientVersion}"
    compile "com.google.http-client:google-http-client-apache-v2:${httpClientVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile group: 'org.json', name: 'json', version: "${jsonVersion}"
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.1'
    provided group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.55'
    implementation "io.github.cdimascio:java-dotenv:${dotenv}"
    implementation 'org.apache.commons:commons-lang3:3.2'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.11'

    testImplementation("org.unitils:unitils-core:3.4.6")
}

jar {
    manifest {
        attributes("Implementation-Title": "${rootProject.group}:${rootProject.name}",
                "Implementation-Version": version,
                "Implementation-Vendor": "InCounty INC")
    }

    from {
        (configurations.runtime - configurations.provided).collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    jvmArgs '-Dhttps.protocols=TLSv1.2'
    jvmArgs '-Dhttps.cipherSuites=TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256'
    testlogger {
        showFullStackTraces true
        showStandardStreams true
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

nexusStaging {
    packageGroup = project.getGroup()
}

tasks.withType(Test) {

    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

